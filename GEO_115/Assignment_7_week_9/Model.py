# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-12-07 20:57:49
"""

# Importing the arcpy module for ArcGIS geoprocessing
import arcpy

def buffer_features(input_features, output_feature_class, buffer_distance):
    """Buffer the input features by the specified distance."""
    try:
        # Check if input features are provided
        if not input_features:
            raise ValueError("Input features are required for buffering.")
        
        # Perform the buffer analysis
        # in_features: the input features to buffer
        # out_feature_class: the output feature class to create
        # buffer_distance_or_field: the distance to buffer the features
        # dissolve_option: "ALL" to dissolve all buffers into a single feature
        arcpy.analysis.Buffer(in_features=input_features, out_feature_class=output_feature_class, buffer_distance_or_field=buffer_distance, dissolve_option="ALL")
        
        # Add a message indicating the buffer was created successfully
        arcpy.AddMessage(f"Buffer created: {output_feature_class}")
    except arcpy.ExecuteError:
        # Handle geoprocessing errors
        arcpy.AddError(arcpy.GetMessages(2))
    except Exception as e:
        # Handle other errors
        arcpy.AddError(str(e))

def intersect_features(input_features_list, output_feature_class):
    """Intersect the input features."""
    try:
        # Check if at least two input features are provided
        if not input_features_list or len(input_features_list) < 2:
            raise ValueError("At least two input features are required for intersecting.")
        
        # Perform the intersect analysis
        # in_features: the list of input features to intersect
        # out_feature_class: the output feature class to create
        arcpy.analysis.Intersect(in_features=input_features_list, out_feature_class=output_feature_class)
        
        # Add a message indicating the intersect was created successfully
        arcpy.AddMessage(f"Intersect created: {output_feature_class}")
    except arcpy.ExecuteError:
        # Handle geoprocessing errors
        arcpy.AddError(arcpy.GetMessages(2))
    except Exception as e:
        # Handle other errors
        arcpy.AddError(str(e))

def clip_features(input_features, clip_features, output_feature_class):
    """Clip the input features with the clip features."""
    try:
        # Check if input features and clip features are provided
        if not input_features or not clip_features:
            raise ValueError("Both input features and clip features are required for clipping.")
        
        # Perform the clip analysis
        # in_features: the input features to clip
        # clip_features: the features to use as the clipping boundary
        # out_feature_class: the output feature class to create
        arcpy.analysis.Clip(in_features=input_features, clip_features=clip_features, out_feature_class=output_feature_class)
        
        # Add a message indicating the clip was created successfully
        arcpy.AddMessage(f"Clip created: {output_feature_class}")
    except arcpy.ExecuteError:
        # Handle geoprocessing errors
        arcpy.AddError(arcpy.GetMessages(2))
    except Exception as e:
        # Handle other errors
        arcpy.AddError(str(e))

def Model(fishing_access_point, watershed_boundary, output_gdb):
    """Main model function."""
    # Allow overwriting of output files
    arcpy.env.overwriteOutput = True

    # Define output paths for intermediate and final results
    fishing_access_point_buffer = f"{output_gdb}\\Fishing_Access_Point_Buffer"
    watershed_boundary_intersect = f"{output_gdb}\\Watershed_Boundary_Intersect"
    clipped_feature_class = f"{output_gdb}\\Clipped_Feature_Class"

    # Buffer the fishing access points by 500 meters
    buffer_features(fishing_access_point, fishing_access_point_buffer, "500 Meters")

    # Intersect the buffer with the watershed boundary
    intersect_features([fishing_access_point_buffer, watershed_boundary], watershed_boundary_intersect)

    # Clip the intersected features with the watershed boundary
    clip_features(watershed_boundary_intersect, watershed_boundary, clipped_feature_class)

if __name__ == '__main__':
    # Define input parameters
    fishing_access_point = arcpy.GetParameterAsText(0)
    watershed_boundary = arcpy.GetParameterAsText(1)
    output_gdb = arcpy.GetParameterAsText(2)

    # Check if input parameters are valid
    if not fishing_access_point:
        arcpy.AddError("Fishing Access Point is required.")
    if not watershed_boundary:
        arcpy.AddError("Watershed Boundary is required.")
    if not output_gdb:
        arcpy.AddError("Output Geodatabase is required.")

    # Run the model if all parameters are valid
    if fishing_access_point and watershed_boundary and output_gdb:
        Model(fishing_access_point, watershed_boundary, output_gdb)
